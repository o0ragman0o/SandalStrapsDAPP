let cbId = 0;
const luxHandler = {
	has(target, key) {
		if (key === "__isLux") return true;
		return key in target;
	},
	get(target, key) {
		if(key === "__cbs") return target[key];
		if(key === "gaze") 
			return (key, callback)=>{
			if(!('__cbs' in target)) target.__cbs = {};
			if(!(key in target.__cbs)) target.__cbs[key] = {};
			target.__cbs[key][++cbId] = callback;
			return cbId;				
		}
		target._k = key;
		return target[key] !== undefined ? Lux(target[key], target) : undefined;
	},
	set(target, key, value) {
		if(key == '_p' || key == '_k') {
			target[key] = value;
			return true;
		}
		target[key] = Lux(value);
		target._k = key;
		do {
			if('__cbs' in target) {
				let cbs = target.__cbs[target._k];
				for(let cb in cbs){setTimeout(()=>{cbs[cb](value, key, target);});}
			}
			target = target._p;
		} while(target);			
		return true;
	},
}
function Lux (target = {}, parent) {
	if(typeof target !== 'object' || target == null) return target;
	target._p = parent;
	if('__isLux' in target) return target;
	return new Proxy(target, luxHandler);
}
const Session = Lux();
const cache = new Proxy({},{get(target, key) { if(key in target) return target[key];}});
cache.get = function(id, flame) {return cache[id] ? cache[id].f[flame] : undefined;}
cache.set = function(id, flame, value) {cache[id].f[flame] = value;}
const renderEvent = new Event('render');
const t_rplc = {'@':'c.f.','{$':'${','{#':'${Tilux.t','{>':'${Tilux.l'};
let idNum = 0;
const CACHE = true;
const sparks = [];
function newId(prefix = "tlx_") { return prefix + idNum++;}
class Tilux {
	constructor(candle = {}, toCache) {
		if(!!candle.f && !!candle.f.id && !!cache[candle.f.id]) return cache[candle.f.id];
		let lit = Lux();
		lit.w = candle.w || '';
		lit.f = candle.f || {};
		lit.s = candle.s || undefined;
		lit.f.id = lit.f.id || newId();
		if(toCache) cache[lit.f.id] = lit;
		lit.watch = (lux, key) => {lux.gaze(key, ()=>{Tilux.render(`#${lit.f.id}`, lit)})}
		lit.gaze('f', ()=>{Tilux.render(`#${lit.f.id}`, lit);});
		if('bind' in lit.f) lit.f.bind.split(' ').forEach(
			(b)=>{ Session.gaze(b, ()=>{Tilux.render(`#${lit.f.id}`, lit)}); }
		);
		if('created' in lit.f) lit.f.created.apply(lit);
		return lit;
	}
	static render(s, c) {
		let activeId = document.activeElement.id;
		document.querySelectorAll(s).forEach( root => {
			let sibling = root.previousSibling;
			let parent = root.parentElement;
			sparks.length = 0;
			root.outerHTML = this.l(c);
			root = sibling.nextSibling;
			sparks.forEach((spark) => {
				for(let selector in spark){
					parent.querySelectorAll(selector).forEach( node => {
							for(let event in spark[selector]) {
								if(event != '_k') node.addEventListener(event, spark[selector][event]);
							}
							node.dispatchEvent(renderEvent);
						}
					);
				}
			})
		});
		if(activeId !== document.activeElement.id) window[activeId].focus();
	}
	static t(a, w=['']) {
		return a.map(
			(e)=>{return `${!!w[0]?`<${w[0]}>`:``}${!e.map?e:this.t(w.slice(1),e)}${!!w[0]?`</${w[0]}>`:``}`}).join('')
	}
	static l(c, d=true, e='') {
		c = d ? c : e;
		if(typeof c !== 'object') c = {w:c || ''};
		if(c.s) sparks.push(c.s);
		return Function('c', `"use strict"; return \`${c.w.replace(/@|{\$|{#|{>/g, f=>t_rplc[f])}\`;`)(c)
	}
}